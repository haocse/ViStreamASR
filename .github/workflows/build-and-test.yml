name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          # Test on macOS ARM64 (Apple Silicon)
          - os: macos-latest
            python-version: "3.11"
            arch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsndfile1 ffmpeg
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libsndfile ffmpeg
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Windows dependencies handled by pip packages
        echo "Windows dependencies managed by pip"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        pip install -r requirements.txt
    
    - name: Install package in development mode
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        pip install -e .
    
    - name: Run tests
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        python test_library.py
    
    - name: Test CLI commands
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        # Test CLI help (should work without audio files)
        vistream-asr --help || echo "CLI help failed but continuing..."
        # Test basic import functionality
        python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            from streaming import StreamingASR
            from core import ASREngine  
            print('[OK] All imports successful')
            asr = StreamingASR(debug=False)
            print(f'[OK] StreamingASR initialized: {asr.chunk_size_ms}ms chunks')
        except Exception as e:
            print(f'[ERROR] Import failed: {e}')
            sys.exit(1)
        "

  build-wheels:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
    
    - name: Build source distribution (Linux only)
      if: runner.os == 'Linux'
      run: |
        python -m build --sdist
    
    - name: Build wheel
      run: |
        python -m build --wheel
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist/

  publish:
    needs: [test, build-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Flatten artifacts
      run: |
        mkdir -p dist/
        find artifacts/ -name "*.whl" -exec cp {} dist/ \;
        find artifacts/ -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/
        echo "Files to publish:"
        find dist/ -name "*.whl" -o -name "*.tar.gz"
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/ 